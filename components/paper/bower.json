{
  "name": "paper",
  "version": "0.9.9",
  "main": "dist/paper.js",
  "ignore": [
    "build",
    "components",
    "dist/paper-node.js",
    "fatline",
    "projects",
    "node_modules",
    "package.json",
    "src",
    "test"
  ],
  "devDependencies": {
    "straps": "~1.1.3",
    "acorn": "git://github.com/paperjs/acorn#0.3.2",
    "esprima": "~1.0.3",
    "stats.js": "r11"
  },
  "gitHead": "4e980368283ed0e1e6acc8f1f3e240d8ee78b845",
  "readme": "# Paper.js - The Swiss Army Knife of Vector Graphics Scripting\n\nIf you want to work with Paper.js, simply download the latest \"stable\" version from [http://paperjs.org/download/](http://paperjs.org/download/)\n\n- Website: <http://paperjs.org/>\n- Discussion forum: <http://groups.google.com/group/paperjs>\n- Mainline source code: <https://github.com/paperjs/paper.js>\n- Twitter: [@paperjs](http://twitter.com/paperjs)\n- Daily development builds: <http://paperjs.org/download/>\n\n## Installing Paper.js\n\nYou can download prebuilt packages from <http://paperjs.org/download/>.\n\nAs of July 2013, the recommended way to install and maintain Paper.js is through Bower for browsers, and through NPM for Node.js.\n\nSee <http://madebyhoundstooth.com/blog/install-node-with-homebrew-on-os-x/> for a tutorial explaining how to install Node.js, NPM and Bower on OSX.\n\nWith Bower installed, simply type this command in your project folder:\n\n\tbower install paper\n\nUpon execution, you will find a `paper` folder inside the project's `component` folder. For more information on Bower and to learn about its features for dependence tracking, see <http://bower.io/>.\n\n## Installing for Node.js\n\nSimilarly you can use NPM to install Paper.js for Node.js. But before doing so, you need the Cairo Graphics library installed, see <http://cairographics.org/>.\n\nThe easiest way to install Cairo on OSX is through Homebrew <http://mxcl.github.io/homebrew/>.\n\n\tbrew install cairo\n\nOnce Homebrew has installed this for you, you can then install the Paper.js module:\n\n\tnpm install paper\n\nNote that currently there is an issue on OSX with Cairo. If the above causes errors, the following will most likely fix it:\n\n\tPKG_CONFIG_PATH=/opt/X11/lib/pkgconfig/ npm insetall paper\n\nAlso, whenever you would like to update the modules, you will need to execute:\n\n\tPKG_CONFIG_PATH=/opt/X11/lib/pkgconfig/ npm update\n\n## Development\n\n**Get the source (for building):**\n\n\tgit clone --recursive git://github.com/paperjs/paper.js.git\n\n**Get the source (for contributing):**\n\nIf you want to contribute to the project you will have to [make a fork](http://help.github.com/forking/). Then do this:\n\n\tgit clone --recursive git@github.com:yourusername/paper.js.git\n\tgit remote add upstream git://github.com/paperjs/paper.js.git\n\n### Refreshing Your Clone\n\nTo fetch changes from origin, run\n\n\tgit fetch origin\n\nIf you are working with a fork and would like to fetch from upstream, run\n\n\tgit fetch upstream\n\nTo update the `jsdoc-toolkit` submodule inside the `build` folder, used to generate the documentation, run\n\n\tgit submodule update --init\n\n### Building the Library\n\nPaper.js has a couple of dependencies as Bower and NPM modules. See <http://madebyhoundstooth.com/blog/install-node-with-homebrew-on-os-x/> for a tutorial explaining how to install Node.js, NPM and Bower on OSX.\n\nIn order to be able to build Paper.js, these dependencies need to be installed first after checking out the repository:\n\n\tnpm install\n\tbower install\n\nNext you need to create minified versions of some of these dependencies. This is handled by the `minify-components.sh` script inside the `build` folder:\n\n\tcd build\n\t./minify-components.sh\n\nThe Paper.js sources are distributed across many separate files, organised in subfolders inside the `src` folder. To compile them all into one distributable file, you can run the `build.sh` script inside the `build` folder:\n\n\tcd build\n\t./build.sh\n\nYou will then find the built library inside the `dist` folder, named `paper.js`.\n\n`build.sh` offer two modes:\n\n\tcommented\t\tPreprocessed but still formated and commented\n\tstripped\t\tFormated but without comments (default)\n\nIn order to minify the resulting built versions, you can run the `minify.sh` script:\n\n\tcd build\n\t./minify.sh\n\n### Building the Documentation\n\nSimilarly to building the library, you can run `docs.sh` inside the `build` folder to build the documentation.\n\n\tcd build\n\t./docs.sh\n\nYour docs will then be located at `dist/docs`.\n\n### Editing and Running Code during Development\n\nAs a handy alternative to building the library after each change to try it out in your scripts, there is a helper script `src/load.js` that loads the library directly from all the separate source files in the `src` folder. The shell script `load.sh` in the `build` folder produces a `paper.js` library in `dist` that does nothing else than loading the source files through `src/load.js`. This means you can switch between loading from sources and loading a built library simply by running `build.sh` or `load.sh` inside the `build` folder.\n\n\tcd build\n\t./load.sh\n\nAnd to go back to a built library\n\n\tcd build\n\t./build.sh\n\nNote that your PaperScripts examples do not need to change, they can simply load `dist/paper.js`, which will always do the right rhing. Note also that `src/load.js` handles both browsers and Node.js, through the handy PrePro library <http://github.com/lehni/prepro.js>.\n\n### Testing\n\nPaper.js was developed and tested from day 1 using proper unit testing through jQuery's [Qunit](http://docs.jquery.com/Qunit). To run the tests after any change to the library's source, simply open `index.html` inside the `test` folder in your web browser. There should be a green bar at the top, meaning all tests have passed. If the bar is red, some tests have not passed. These will be highlighted and become visible when scrolling down.\n\n### Contributing\n\nThe main Paper.js source tree is hosted on git (a popular [DVCS](http://en.wikipedia.org/wiki/Distributed_revision_control)), thus you should create a fork of the repository in which you perform development. See <http://help.github.com/forking/>.\n\nWe prefer that you send a [*pull request* here on GitHub](http://help.github.com/pull-requests/) which will then be merged into the official main line repository. You need to sign the Paper.js CLA to be able to contribute (see below).\n\nAlso, in your first contribution, add yourself to the end of `AUTHORS.md` (which of course is optional).\n\n#### Creating and Submitting a Patch\n\nAs mentioned earlier in this article, we prefer that you send a [*pull request*](http://help.github.com/pull-requests/) on GitHub.\n\n1. Create a fork of the upstream repository by visiting <https://github.com/paperjs/paper.js/fork>. If you feel insecure, here's a great guide: <http://help.github.com/forking/>\n\n2. Clone of your repository: `git clone https://yourusername@github.com/yourusername/paper.js.git`\n\n3. This is important: Create a so-called *topic branch*: `git checkout -tb name-of-my-patch` where \"name-of-my-patch\" is a short but descriptive name of the patch you're about to create. Don't worry about the perfect name though -- you can change this name at any time later on.\n\n4. Hack! Make your changes, additions, etc and commit them.\n\n5. Send a pull request to the upstream repository's owner by visiting your repository's site at github (i.e. https://github.com/yourusername/paper.js) and press the \"Pull Request\" button. Here's a good guide on pull requests: <http://help.github.com/pull-requests/>\n\n**Use one topic branch per feature** -- don't mix different kinds of patches in the same branch. Instead, merge them all together into your master branch (or develop everything in your master and then cherry-pick-and-merge into the different topic branches). Git provides for an extremely flexible workflow, which in many ways causes more confusion than it helps you when new to collaborative software development. The guides provided by GitHub at <http://help.github.com/> are a really good starting point and reference.\nIf you are fixing a ticket, a convenient way to name the branch is to use the URL slug from the bug tracker, like this: `git checkout -tb 53-feature-manually-select-language`.\n\n#### Contributor License Agreement\n\nBefore we can accept any contributions to Paper.js, you need to sign this [CLA](http://en.wikipedia.org/wiki/Contributor_License_Agreement):\n\n[Contributor License Agreement](https://spreadsheets.google.com/a/paperjs.org/spreadsheet/embeddedform?formkey=dENxd0JBVDY2REo3THVuRmh4YjdWRlE6MQ)\n\n> The purpose of this agreement is to clearly define the terms under which intellectual property has been contributed to Paper.js and thereby allow us to defend the project should there be a legal dispute regarding the software at some future time.\n\nFor a list of contributors, please see [AUTHORS](https://github.com/paperjs/paper.js/blob/master/AUTHORS.md)\n\n## License\n\nSee the file [LICENSE](https://github.com/paperjs/paper.js/blob/master/LICENSE.txt)\n",
  "readmeFilename": "README.md",
  "_id": "paper@0.9.9",
  "description": "If you want to work with Paper.js, simply download the latest \"stable\" version from [http://paperjs.org/download/](http://paperjs.org/download/)",
  "repository": {
    "type": "git",
    "url": "git://github.com/paperjs/paper.js.git"
  }
}